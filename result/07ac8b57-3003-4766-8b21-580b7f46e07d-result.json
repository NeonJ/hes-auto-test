{"name": "test_get_standard_event", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <test_meter_event.Test_Meter_Event object at 0x0000022D16C30550>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\nevent = {'entries': 1440, 'entries_inuse_register_id': 'Standard event log inuse', 'entries_register_id': 'Standard event log entries', 'len': 2, ...}\n\n    @smokeTest\n    def test_get_standard_event(self, caseData, requestMessage, device, event):\n        \"\"\"\n        使用同步读取的方式去对电表进行standard event读取 - 按照Entry+Date方式进行并进行数据项对比\n         \"\"\"\n        print(\"Step 1 : 获取当前电表第一条standard event数据\")\n        data = caseData('testData/MeterFrozenData/meter_event_data.json')\n        requestData = data['meter_standard_event']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        requestData['payload'][0]['data'][0]['registerId'] = event['standard_register_id']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        if response.get('reply')['replyCode'] != 200:\n            print(response.get('payload')[0]['desc'])\n>           assert False\nE           assert False\n\ntestCase\\HESIntegration\\Event_Check\\test_meter_event.py:46: AssertionError"}, "description": "\n        使用同步读取的方式去对电表进行standard event读取 - 按照Entry+Date方式进行并进行数据项对比\n         ", "attachments": [{"name": "stdout", "source": "7a6ed234-ca13-42f8-a51e-8b5c8f9c6f6b-attachment.txt", "type": "text/plain"}], "start": 1665897293674, "stop": 1665897293810, "uuid": "c639acd8-92c0-4575-89c7-6db871d795ae", "historyId": "29fbdc348a8626f2e31c7dcedfa96413", "testCaseId": "fd0b093e0a17471ca3930dd0f84c915e", "fullName": "testCase.HESIntegration.Event_Check.test_meter_event.Test_Meter_Event#test_get_standard_event", "labels": [{"name": "tag", "value": "smokeTest"}, {"name": "parentSuite", "value": "testCase.HESIntegration.Event_Check"}, {"name": "suite", "value": "test_meter_event"}, {"name": "subSuite", "value": "Test_Meter_Event"}, {"name": "host", "value": "NeonPC"}, {"name": "thread", "value": "20028-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCase.HESIntegration.Event_Check.test_meter_event"}]}