{"created": 1665897324.213485, "duration": 67.88459992408752, "exitcode": 1, "root": "D:\\git\\hes-auto-test", "environment": {"Python": "3.6.6", "Platform": "Windows-10-10.0.25217-SP0", "Packages": {"pytest": "7.0.1", "py": "1.11.0", "pluggy": "1.0.0"}, "Plugins": {"allure-pytest": "2.11.1", "Faker": "14.2.1", "dependency": "0.5.1", "json-report": "1.5.0", "metadata": "1.11.0", "mock": "3.6.1", "ordering": "0.6", "rerunfailures": "10.2"}}, "summary": {"failed": 26, "skipped": 3, "passed": 3, "total": 32, "collected": 57, "deselected": 25}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "testCase/__init__.py", "type": "Package"}, {"nodeid": "testCase/HESIntegration/__init__.py", "type": "Package"}, {"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register_short.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Daily_Data_Check/test_meter_daily.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Event_Check/test_meter_event.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Key_Change/test_key_change.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Monthly_Data_Check/test_meter_monthly.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Phase_Vector/test_phase_vector.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/RelayControlTask/__init__.py", "type": "Package"}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_meter_relay_status.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Schedule_Setting_Check/test_schedule_setting.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Tariff/test_set_meter_tariff.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Upgrade/test_version_read.py", "type": "Module"}, {"nodeid": "testCase/HESIntegration/Upgrade/test_version_upgrade.py", "type": "Module"}]}, {"nodeid": "testCase/__init__.py", "outcome": "passed", "result": []}, {"nodeid": "testCase/HESIntegration/__init__.py", "outcome": "passed", "result": []}, {"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register.py::Test_Auto_Register", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register.py::Test_Auto_Register::test_meter_register", "type": "Function", "lineno": 21, "deselected": true}, {"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register.py::Test_Auto_Register::test_meter_register_exception_1", "type": "Function", "lineno": 65, "deselected": true}, {"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register.py::Test_Auto_Register::test_meter_register_exception_2", "type": "Function", "lineno": 109, "deselected": true}]}, {"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register.py::Test_Auto_Register", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register_short.py::Test_Auto_Register_Short", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register_short.py::Test_Auto_Register_Short::test_meter_register_short", "type": "Function", "lineno": 19, "deselected": true}]}, {"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register_short.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Auto_Registration_Check/test_auto_register_short.py::Test_Auto_Register_Short", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Daily_Data_Check/test_meter_daily.py::Test_Meter_Daily", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Daily_Data_Check/test_meter_daily.py::Test_Meter_Daily::test_get_daily_entries1", "type": "Function", "lineno": 14, "deselected": true}, {"nodeid": "testCase/HESIntegration/Daily_Data_Check/test_meter_daily.py::Test_Meter_Daily::test_get_daily_entries", "type": "Function", "lineno": 32}, {"nodeid": "testCase/HESIntegration/Daily_Data_Check/test_meter_daily.py::Test_Meter_Daily::test_get_daily_date", "type": "Function", "lineno": 49}]}, {"nodeid": "testCase/HESIntegration/Daily_Data_Check/test_meter_daily.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Daily_Data_Check/test_meter_daily.py::Test_Meter_Daily", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Event_Check/test_meter_event.py::Test_Meter_Event", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Event_Check/test_meter_event.py::Test_Meter_Event::test_get_standard_event_entries", "type": "Function", "lineno": 13}, {"nodeid": "testCase/HESIntegration/Event_Check/test_meter_event.py::Test_Meter_Event::test_get_standard_event", "type": "Function", "lineno": 30}]}, {"nodeid": "testCase/HESIntegration/Event_Check/test_meter_event.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Event_Check/test_meter_event.py::Test_Meter_Event", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Key_Change/test_key_change.py::Test_Key_Change", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Key_Change/test_key_change.py::Test_Key_Change::test_key_change_Akey", "type": "Function", "lineno": 14, "deselected": true}, {"nodeid": "testCase/HESIntegration/Key_Change/test_key_change.py::Test_Key_Change::test_key_change_Ekey", "type": "Function", "lineno": 50, "deselected": true}]}, {"nodeid": "testCase/HESIntegration/Key_Change/test_key_change.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Key_Change/test_key_change.py::Test_Key_Change", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Monthly_Data_Check/test_meter_monthly.py::Test_Meter_Monthly", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Monthly_Data_Check/test_meter_monthly.py::Test_Meter_Monthly::test_get_monthly_entries", "type": "Function", "lineno": 13}, {"nodeid": "testCase/HESIntegration/Monthly_Data_Check/test_meter_monthly.py::Test_Meter_Monthly::test_get_monthly_date", "type": "Function", "lineno": 32}]}, {"nodeid": "testCase/HESIntegration/Monthly_Data_Check/test_meter_monthly.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Monthly_Data_Check/test_meter_monthly.py::Test_Meter_Monthly", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_get_meter_status", "type": "Function", "lineno": 17}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_get_meter_time", "type": "Function", "lineno": 27}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_get_device_online1", "type": "Function", "lineno": 52}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_get_device_online2", "type": "Function", "lineno": 62}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_get_device_online3", "type": "Function", "lineno": 72}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_MasterCoreState", "type": "Function", "lineno": 82}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_SuspendMasterCoreTask1", "type": "Function", "lineno": 92}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_SuspendMasterCoreTask2", "type": "Function", "lineno": 102}]}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Phase_Vector/test_phase_vector.py::Test_Phase_Vector", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Phase_Vector/test_phase_vector.py::Test_Phase_Vector::test_get_vector", "type": "Function", "lineno": 12}]}, {"nodeid": "testCase/HESIntegration/Phase_Vector/test_phase_vector.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Phase_Vector/test_phase_vector.py::Test_Phase_Vector", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py::Test_Meter_Profile", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py::Test_Meter_Profile::test_get_lp_entries", "type": "Function", "lineno": 13}, {"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py::Test_Meter_Profile::test_get_lp_date", "type": "Function", "lineno": 31}, {"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py::Test_Meter_Profile::test_get_pq_entries", "type": "Function", "lineno": 60}, {"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py::Test_Meter_Profile::test_get_pq_date", "type": "Function", "lineno": 78}]}, {"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py::Test_Meter_Profile", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/RelayControlTask/__init__.py", "outcome": "passed", "result": []}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_meter_relay_status.py::Test_Meter_Relay_Status", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Relay_Control/test_meter_relay_status.py::Test_Meter_Relay_Status::test_read_relay_status_sync", "type": "Function", "lineno": 16}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_meter_relay_status.py::Test_Meter_Relay_Status::test_read_relay_status_async", "type": "Function", "lineno": 30, "deselected": true}]}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_meter_relay_status.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Relay_Control/test_meter_relay_status.py::Test_Meter_Relay_Status", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_on_standard_1", "type": "Function", "lineno": 19}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_on_standard_2", "type": "Function", "lineno": 35}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_off_standard_1", "type": "Function", "lineno": 54}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_off_standard_2", "type": "Function", "lineno": 73}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_on_home", "type": "Function", "lineno": 90}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_off_home", "type": "Function", "lineno": 104}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_on_task", "type": "Function", "lineno": 118, "deselected": true}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_off_task", "type": "Function", "lineno": 165, "deselected": true}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_on_task_billing", "type": "Function", "lineno": 212, "deselected": true}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_off_task_billing", "type": "Function", "lineno": 259, "deselected": true}]}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Schedule_Setting_Check/test_schedule_setting.py::Test_Schedule_Setting", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Schedule_Setting_Check/test_schedule_setting.py::Test_Schedule_Setting::test_meter_schedule_setting_daily", "type": "Function", "lineno": 21, "deselected": true}, {"nodeid": "testCase/HESIntegration/Schedule_Setting_Check/test_schedule_setting.py::Test_Schedule_Setting::test_meter_schedule_setting_monthly", "type": "Function", "lineno": 119, "deselected": true}, {"nodeid": "testCase/HESIntegration/Schedule_Setting_Check/test_schedule_setting.py::Test_Schedule_Setting::test_meter_schedule_setting_lp", "type": "Function", "lineno": 219, "deselected": true}, {"nodeid": "testCase/HESIntegration/Schedule_Setting_Check/test_schedule_setting.py::Test_Schedule_Setting::test_meter_schedule_setting_daily_event", "type": "Function", "lineno": 317, "deselected": true}, {"nodeid": "testCase/HESIntegration/Schedule_Setting_Check/test_schedule_setting.py::Test_Schedule_Setting::test_meter_schedule_setting_st", "type": "Function", "lineno": 415, "deselected": true}, {"nodeid": "testCase/HESIntegration/Schedule_Setting_Check/test_schedule_setting.py::Test_Schedule_Setting::test_meter_schedule_setting_event", "type": "Function", "lineno": 509, "deselected": true}]}, {"nodeid": "testCase/HESIntegration/Schedule_Setting_Check/test_schedule_setting.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Schedule_Setting_Check/test_schedule_setting.py::Test_Schedule_Setting", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff.py::Test_Get_Meter_Tariff", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff.py::Test_Get_Meter_Tariff::test_GetMeterTariff_Active", "type": "Function", "lineno": 10}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff.py::Test_Get_Meter_Tariff::test_GetMeterTariff_Passive", "type": "Function", "lineno": 23}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff.py::Test_Get_Meter_Tariff::test_GetMeterTariff_All", "type": "Function", "lineno": 36}]}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff.py::Test_Get_Meter_Tariff", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py::Test_Get_Meter_Tariff_New", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py::Test_Get_Meter_Tariff_New::test_get_tariff_new_all", "type": "Function", "lineno": 10}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py::Test_Get_Meter_Tariff_New::test_get_tariff_new_active", "type": "Function", "lineno": 26}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py::Test_Get_Meter_Tariff_New::test_get_tariff_new_passive", "type": "Function", "lineno": 42}]}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py::Test_Get_Meter_Tariff_New", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Tariff/test_set_meter_tariff.py::Test_Set_Meter_Tariff", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Tariff/test_set_meter_tariff.py::Test_Set_Meter_Tariff::test_SetMeterTariff", "type": "Function", "lineno": 14, "deselected": true}]}, {"nodeid": "testCase/HESIntegration/Tariff/test_set_meter_tariff.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Tariff/test_set_meter_tariff.py::Test_Set_Meter_Tariff", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Upgrade/test_version_read.py::Test_Get_Meter_Version", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Upgrade/test_version_read.py::Test_Get_Meter_Version::test_get_meter_app_version", "type": "Function", "lineno": 14, "deselected": true}, {"nodeid": "testCase/HESIntegration/Upgrade/test_version_read.py::Test_Get_Meter_Version::test_get_meter_legal_version", "type": "Function", "lineno": 50, "deselected": true}, {"nodeid": "testCase/HESIntegration/Upgrade/test_version_read.py::Test_Get_Meter_Version::test_get_meter_module_version", "type": "Function", "lineno": 86, "deselected": true}]}, {"nodeid": "testCase/HESIntegration/Upgrade/test_version_read.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Upgrade/test_version_read.py::Test_Get_Meter_Version", "type": "Class"}]}, {"nodeid": "testCase/HESIntegration/Upgrade/test_version_upgrade.py::Test_Meter_Upgrade", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Upgrade/test_version_upgrade.py::Test_Meter_Upgrade::test_meter_app_upgrade", "type": "Function", "lineno": 14, "deselected": true}, {"nodeid": "testCase/HESIntegration/Upgrade/test_version_upgrade.py::Test_Meter_Upgrade::test_meter_legal_upgrade", "type": "Function", "lineno": 21, "deselected": true}, {"nodeid": "testCase/HESIntegration/Upgrade/test_version_upgrade.py::Test_Meter_Upgrade::test_meter_module_upgrade", "type": "Function", "lineno": 28, "deselected": true}]}, {"nodeid": "testCase/HESIntegration/Upgrade/test_version_upgrade.py", "outcome": "passed", "result": [{"nodeid": "testCase/HESIntegration/Upgrade/test_version_upgrade.py::Test_Meter_Upgrade", "type": "Class"}]}], "tests": [{"nodeid": "testCase/HESIntegration/Daily_Data_Check/test_meter_daily.py::Test_Meter_Daily::test_get_daily_entries", "lineno": 32, "outcome": "failed", "keywords": ["test_get_daily_entries", "pytestmark", "smokeTest", "Test_Meter_Daily", "testCase/HESIntegration/Daily_Data_Check/test_meter_daily.py", "hes-auto-test"], "setup": {"duration": 4.221209199999997, "outcome": "passed", "stderr": "WARNING:nacos.client:[do-sync-req] http://localhost:8848 connection error:[WinError 10061] \u7531\u4e8e\u76ee\u6807\u8ba1\u7b97\u673a\u79ef\u6781\u62d2\u7edd\uff0c\u65e0\u6cd5\u8fde\u63a5\u3002\nERROR:nacos.client:[do-sync-req] http://localhost:8848 maybe down, no server is currently available\nERROR:nacos.client:[get-config] exception All server are not available occur\nTraceback (most recent call last):\n  File \"c:\\users\\neon\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\nacos\\client.py\", line 395, in get_config\n    resp = self._do_sync_req(\"/nacos/v1/cs/configs\", None, params, None, timeout or self.default_timeout)\n  File \"c:\\users\\neon\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\nacos\\client.py\", line 668, in _do_sync_req\n    raise NacosRequestException(\"All server are not available\")\nnacos.exception.NacosRequestException: All server are not available\nERROR:nacos.client:[get-config] get config from server failed, try snapshot, data_id:camel10-DC, group:QA, namespace:HES\n", "log": [{"name": "nacos.client", "msg": "[do-sync-req] http://localhost:8848 connection error:[WinError 10061] \u7531\u4e8e\u76ee\u6807\u8ba1\u7b97\u673a\u79ef\u6781\u62d2\u7edd\uff0c\u65e0\u6cd5\u8fde\u63a5\u3002", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "c:\\users\\neon\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\nacos\\client.py", "filename": "client.py", "module": "client", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 663, "funcName": "_do_sync_req", "created": 1665897290.136619, "msecs": 136.61909103393555, "relativeCreated": 34564.30149078369, "thread": 23348, "threadName": "MainThread", "processName": "MainProcess", "process": 20028}, {"name": "nacos.client", "msg": "[do-sync-req] http://localhost:8848 maybe down, no server is currently available", "args": null, "levelname": "ERROR", "levelno": 40, "pathname": "c:\\users\\neon\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\nacos\\client.py", "filename": "client.py", "module": "client", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 667, "funcName": "_do_sync_req", "created": 1665897290.136619, "msecs": 136.61909103393555, "relativeCreated": 34564.30149078369, "thread": 23348, "threadName": "MainThread", "processName": "MainProcess", "process": 20028}, {"name": "nacos.client", "msg": "[get-config] exception All server are not available occur", "args": null, "levelname": "ERROR", "levelno": 40, "pathname": "c:\\users\\neon\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\nacos\\client.py", "filename": "client.py", "module": "client", "exc_info": null, "exc_text": "Traceback (most recent call last):\n  File \"c:\\users\\neon\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\nacos\\client.py\", line 395, in get_config\n    resp = self._do_sync_req(\"/nacos/v1/cs/configs\", None, params, None, timeout or self.default_timeout)\n  File \"c:\\users\\neon\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\nacos\\client.py\", line 668, in _do_sync_req\n    raise NacosRequestException(\"All server are not available\")\nnacos.exception.NacosRequestException: All server are not available", "stack_info": null, "lineno": 418, "funcName": "get_config", "created": 1665897290.1376598, "msecs": 137.65978813171387, "relativeCreated": 34565.34218788147, "thread": 23348, "threadName": "MainThread", "processName": "MainProcess", "process": 20028}, {"name": "nacos.client", "msg": "[get-config] get config from server failed, try snapshot, data_id:camel10-DC, group:QA, namespace:HES", "args": null, "levelname": "ERROR", "levelno": 40, "pathname": "c:\\users\\neon\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\nacos\\client.py", "filename": "client.py", "module": "client", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 437, "funcName": "get_config", "created": 1665897290.1376598, "msecs": 137.65978813171387, "relativeCreated": 34565.34218788147, "thread": 23348, "threadName": "MainThread", "processName": "MainProcess", "process": 20028}]}, "call": {"duration": 0.14031719999999837, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Daily_Data_Check\\test_meter_daily.py", "lineno": 46, "message": "assert 500 == 200\n  +500\n  -200"}, "traceback": [{"path": "testCase\\HESIntegration\\Daily_Data_Check\\test_meter_daily.py", "lineno": 46, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'createTime': '20200910191946', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'MDM', 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131450', 'data': [{'registerId': 'Daily billing-8. profile_entries'}]}]}\nResponse ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'ae744b3d-56bd-4354-bb60-01bc4bb1add9', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101448', 'executeEndTime': '221016101448', 'transactionId': '2241031003_221016131450', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_meter_daily.Test_Meter_Daily object at 0x0000022D16BCFE80>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\ndaily = {'entries': 3, 'entries_inuse_register_id': 'Daily billing-7. entries_in_use', 'entries_register_id': 'Daily billing-8. profile_entries', 'len': 45, ...}\n\n    @smokeTest\n    def test_get_daily_entries(self, caseData, requestMessage, device, daily):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u7684\u65b9\u5f0f\u53bb\u5bf9\u7535\u8868\u8fdb\u884c\u65e5\u7ed3entries\u6570\u636e\u5bf9\u6bd4\n        \"\"\"\n        data = caseData('testData/MeterFrozenData/meter_daily_data.json')\n        requestData = data['meter_daily_entries']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S', time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        requestData['payload'][0]['data'][0]['registerId'] = daily['entries_register_id']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ', response)\n>       assert response.get('reply')['replyCode'] == 200\nE       assert 500 == 200\nE         +500\nE         -200\n\ntestCase\\HESIntegration\\Daily_Data_Check\\test_meter_daily.py:46: AssertionError"}, "teardown": {"duration": 1.004920999999996, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Daily_Data_Check/test_meter_daily.py::Test_Meter_Daily::test_get_daily_date", "lineno": 49, "outcome": "failed", "keywords": ["test_get_daily_date", "pytestmark", "smokeTest", "Test_Meter_Daily", "testCase/HESIntegration/Daily_Data_Check/test_meter_daily.py", "hes-auto-test"], "setup": {"duration": 0.0006464000000008241, "outcome": "passed"}, "call": {"duration": 0.1344998000000004, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Daily_Data_Check\\test_meter_daily.py", "lineno": 64, "message": "assert 0 == 45\n  +0\n  -45"}, "traceback": [{"path": "testCase\\HESIntegration\\Daily_Data_Check\\test_meter_daily.py", "lineno": 64, "message": "AssertionError"}], "stdout": "Step 1 : \u83b7\u53d6\u5f53\u524d\u7535\u8868\u7b2c\u4e00\u6761\u65e5\u7ed3\u6570\u636e\nhttp://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'serviceType': 'GET_PROFILE', 'businessType': 'GET_PROFILE', 'source': 'MDM', 'createTime': '20200910191946', 'replyAddress': None, 'replyType': None, 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'retryCount': 0, 'retryInterval': 0, 'priority': 0, 'endTime': None, 'startTime': None, 'transactionId': '2241031003_221016131451', 'jobUniqueFlag': False, 'data': [{'clientId': None, 'registerId': 'Daily Billing Profile', 'accessSelector': 0, 'parameter': {'dataFetchMode': 2, 'readTarget': 0, 'startTime': '20211222', 'endTime': '20211222', 'fromEntry': '1', 'toEntry': '1', 'fromSelectedValue': 1, 'toSelectedValue': 0}, 'featurePoint': None}]}]}\nResponse ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '77ceb440-5592-49b8-85ee-88ef6cb8fed6', 'serviceType': 'GET_PROFILE', 'businessType': 'GET_PROFILE', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101449', 'executeEndTime': '221016101449', 'transactionId': '2241031003_221016131451', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_meter_daily.Test_Meter_Daily object at 0x0000022D16C30D30>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\ndaily = {'entries': 3, 'entries_inuse_register_id': 'Daily billing-7. entries_in_use', 'entries_register_id': 'Daily billing-8. profile_entries', 'len': 45, ...}\n\n    @smokeTest\n    def test_get_daily_date(self, caseData, requestMessage, device, daily):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u7684\u65b9\u5f0f\u53bb\u5bf9\u7535\u8868\u8fdb\u884c\u65e5\u7ed3\u8bfb\u53d6 - \u6309\u7167Entry+Date\u65b9\u5f0f\u8fdb\u884c\u5e76\u8fdb\u884c\u6570\u636e\u9879\u5bf9\u6bd4\n        \"\"\"\n        print(\"Step 1 : \u83b7\u53d6\u5f53\u524d\u7535\u8868\u7b2c\u4e00\u6761\u65e5\u7ed3\u6570\u636e\")\n        data = caseData('testData/MeterFrozenData/meter_daily_data.json')\n        requestData = data['meter_daily_data']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S', time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        requestData['payload'][0]['data'][0]['registerId'] = daily['register_id']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ', response)\n>       assert len(response.get('payload')[0].get('data')) == daily['len']\nE       assert 0 == 45\nE         +0\nE         -45\n\ntestCase\\HESIntegration\\Daily_Data_Check\\test_meter_daily.py:64: AssertionError"}, "teardown": {"duration": 1.006930000000004, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Event_Check/test_meter_event.py::Test_Meter_Event::test_get_standard_event_entries", "lineno": 13, "outcome": "failed", "keywords": ["test_get_standard_event_entries", "pytestmark", "smokeTest", "Test_Meter_Event", "testCase/HESIntegration/Event_Check/test_meter_event.py", "hes-auto-test"], "setup": {"duration": 0.001670199999999511, "outcome": "passed"}, "call": {"duration": 0.14107810000000143, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Event_Check\\test_meter_event.py", "lineno": 27, "message": "IndexError: list index out of range"}, "traceback": [{"path": "testCase\\HESIntegration\\Event_Check\\test_meter_event.py", "lineno": 27, "message": "IndexError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'createTime': '20200910191946', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'MDM', 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131452', 'data': [{'registerId': 'Standard event log entries'}]}]}\nResponse ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '544b2803-3eb9-43d9-a681-3d93d8e94f31', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101450', 'executeEndTime': '221016101450', 'transactionId': '2241031003_221016131452', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_meter_event.Test_Meter_Event object at 0x0000022D16C30780>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\nevent = {'entries': 1440, 'entries_inuse_register_id': 'Standard event log inuse', 'entries_register_id': 'Standard event log entries', 'len': 2, ...}\n\n    @smokeTest\n    def test_get_standard_event_entries(self, caseData, requestMessage, device, event):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u7684\u65b9\u5f0f\u53bb\u5bf9\u7535\u8868\u8fdb\u884c\u65e5\u4e8b\u4ef6entries\u6570\u636e\u5bf9\u6bd4\n        \"\"\"\n        data = caseData('testData/MeterFrozenData/meter_event_data.json')\n        requestData = data['meter_daily_event_entries']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        requestData['payload'][0]['data'][0]['registerId'] = event['entries_register_id']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ', response)\n>       assert int(\n            response.get('payload')[0].get('data')[0].get('resultValue').get('dataItemValue')) != len(\n            event['entries_register_id'])\nE       IndexError: list index out of range\n\ntestCase\\HESIntegration\\Event_Check\\test_meter_event.py:27: IndexError"}, "teardown": {"duration": 1.0097085999999962, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Event_Check/test_meter_event.py::Test_Meter_Event::test_get_standard_event", "lineno": 30, "outcome": "failed", "keywords": ["test_get_standard_event", "pytestmark", "smokeTest", "Test_Meter_Event", "testCase/HESIntegration/Event_Check/test_meter_event.py", "hes-auto-test"], "setup": {"duration": 0.0006696000000019353, "outcome": "passed"}, "call": {"duration": 0.13635719999999907, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Event_Check\\test_meter_event.py", "lineno": 46, "message": "assert False"}, "traceback": [{"path": "testCase\\HESIntegration\\Event_Check\\test_meter_event.py", "lineno": 46, "message": "AssertionError"}], "stdout": "Step 1 : \u83b7\u53d6\u5f53\u524d\u7535\u8868\u7b2c\u4e00\u6761standard event\u6570\u636e\nhttp://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'serviceType': 'GET_PROFILE', 'businessType': 'GET_PROFILE', 'source': 'MDM', 'createTime': '20200910191946', 'replyAddress': None, 'replyType': None, 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'retryCount': 0, 'retryInterval': 0, 'priority': 0, 'endTime': None, 'startTime': None, 'transactionId': '2241031003_221016131453', 'jobUniqueFlag': False, 'data': [{'clientId': None, 'registerId': 'Standard event log', 'accessSelector': 0, 'parameter': {'dataFetchMode': 2, 'readTarget': 0, 'startTime': '20211222', 'endTime': '20211222', 'fromEntry': '1', 'toEntry': '1', 'fromSelectedValue': 1, 'toSelectedValue': 0}, 'featurePoint': None}]}]}\nMaster device 2241031003 offline!\n", "longrepr": "self = <test_meter_event.Test_Meter_Event object at 0x0000022D16C30550>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\nevent = {'entries': 1440, 'entries_inuse_register_id': 'Standard event log inuse', 'entries_register_id': 'Standard event log entries', 'len': 2, ...}\n\n    @smokeTest\n    def test_get_standard_event(self, caseData, requestMessage, device, event):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u7684\u65b9\u5f0f\u53bb\u5bf9\u7535\u8868\u8fdb\u884cstandard event\u8bfb\u53d6 - \u6309\u7167Entry+Date\u65b9\u5f0f\u8fdb\u884c\u5e76\u8fdb\u884c\u6570\u636e\u9879\u5bf9\u6bd4\n         \"\"\"\n        print(\"Step 1 : \u83b7\u53d6\u5f53\u524d\u7535\u8868\u7b2c\u4e00\u6761standard event\u6570\u636e\")\n        data = caseData('testData/MeterFrozenData/meter_event_data.json')\n        requestData = data['meter_standard_event']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        requestData['payload'][0]['data'][0]['registerId'] = event['standard_register_id']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        if response.get('reply')['replyCode'] != 200:\n            print(response.get('payload')[0]['desc'])\n>           assert False\nE           assert False\n\ntestCase\\HESIntegration\\Event_Check\\test_meter_event.py:46: AssertionError"}, "teardown": {"duration": 1.0130229000000028, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Monthly_Data_Check/test_meter_monthly.py::Test_Meter_Monthly::test_get_monthly_entries", "lineno": 13, "outcome": "failed", "keywords": ["test_get_monthly_entries", "pytestmark", "smokeTest", "Test_Meter_Monthly", "testCase/HESIntegration/Monthly_Data_Check/test_meter_monthly.py", "hes-auto-test"], "setup": {"duration": 0.0013992999999956623, "outcome": "passed"}, "call": {"duration": 0.13687789999999467, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Monthly_Data_Check\\test_meter_monthly.py", "lineno": 28, "message": "assert False"}, "traceback": [{"path": "testCase\\HESIntegration\\Monthly_Data_Check\\test_meter_monthly.py", "lineno": 28, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'createTime': '20200910191946', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'MDM', 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131454', 'data': [{'registerId': 'EOB Data Profile-8. profile_entries'}]}]}\nResponse ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'e876d692-bb0c-443e-a57a-531422fbc652', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101453', 'executeEndTime': '221016101453', 'transactionId': '2241031003_221016131454', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_meter_monthly.Test_Meter_Monthly object at 0x0000022D16C27C88>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\nmonthly = {'entries': 3, 'entries_inuse_register_id': 'EOB Data Profile-7. entries_in_use', 'entries_register_id': 'EOB Data Profile-8. profile_entries', 'len': 0, ...}\n\n    @smokeTest\n    def test_get_monthly_entries(self, caseData, requestMessage, device, monthly):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u7684\u65b9\u5f0f\u53bb\u5bf9\u7535\u8868\u8fdb\u884c\u6708\u7ed3entries\u6570\u636e\u5bf9\u6bd4\n        \"\"\"\n        data = caseData('testData/MeterFrozenData/meter_monthly_data.json')\n        requestData = data['meter_monthly_entries']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        requestData['payload'][0]['data'][0]['registerId'] = monthly['entries_register_id']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ', response)\n        if response.get('reply')['replyCode'] != 200:\n>           assert False\nE           assert False\n\ntestCase\\HESIntegration\\Monthly_Data_Check\\test_meter_monthly.py:28: AssertionError"}, "teardown": {"duration": 1.0091871999999995, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Monthly_Data_Check/test_meter_monthly.py::Test_Meter_Monthly::test_get_monthly_date", "lineno": 32, "outcome": "failed", "keywords": ["test_get_monthly_date", "pytestmark", "smokeTest", "Test_Meter_Monthly", "testCase/HESIntegration/Monthly_Data_Check/test_meter_monthly.py", "hes-auto-test"], "setup": {"duration": 0.0007361000000045692, "outcome": "passed"}, "call": {"duration": 0.12093740000000253, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Monthly_Data_Check\\test_meter_monthly.py", "lineno": 49, "message": "assert False"}, "traceback": [{"path": "testCase\\HESIntegration\\Monthly_Data_Check\\test_meter_monthly.py", "lineno": 49, "message": "AssertionError"}], "stdout": "Step 1 : \u83b7\u53d6\u5f53\u524d\u7535\u8868\u7b2c\u4e00\u6761\u6708\u7ed3\u6570\u636e\nhttp://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'serviceType': 'GET_PROFILE', 'businessType': 'GET_PROFILE', 'source': 'MDM', 'createTime': '20200910191946', 'replyAddress': None, 'replyType': None, 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'retryCount': 0, 'retryInterval': 0, 'priority': 0, 'endTime': None, 'startTime': None, 'transactionId': '2241031003_221016131455', 'jobUniqueFlag': False, 'data': [{'clientId': None, 'registerId': 'Monthly Billing Profile', 'accessSelector': 0, 'parameter': {'dataFetchMode': 2, 'readTarget': 0, 'startTime': '20211222', 'endTime': '20211222', 'fromEntry': '1', 'toEntry': '1', 'fromSelectedValue': 1, 'toSelectedValue': 0}, 'featurePoint': None}]}]}\nResponse ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '46739689-5c39-4751-934c-831f21ab9b7a', 'serviceType': 'GET_PROFILE', 'businessType': 'GET_PROFILE', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101454', 'executeEndTime': '221016101454', 'transactionId': '2241031003_221016131455', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_meter_monthly.Test_Meter_Monthly object at 0x0000022D16C27EB8>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\nmonthly = {'entries': 3, 'entries_inuse_register_id': 'EOB Data Profile-7. entries_in_use', 'entries_register_id': 'EOB Data Profile-8. profile_entries', 'len': 0, ...}\n\n    @smokeTest\n    def test_get_monthly_date(self, caseData, requestMessage, device, monthly):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u7684\u65b9\u5f0f\u53bb\u5bf9\u7535\u8868\u8fdb\u884c\u6708\u7ed3\u8bfb\u53d6 - \u6309\u7167Entry+Date\u65b9\u5f0f\u8fdb\u884c\u5e76\u8fdb\u884c\u6570\u636e\u9879\u5bf9\u6bd4\n         \"\"\"\n    \n        print(\"Step 1 : \u83b7\u53d6\u5f53\u524d\u7535\u8868\u7b2c\u4e00\u6761\u6708\u7ed3\u6570\u636e\")\n        data = caseData('testData/MeterFrozenData/meter_monthly_data.json')\n        requestData = data['meter_monthly_data']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        requestData['payload'][0]['data'][0]['registerId'] = monthly['register_id']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ', response)\n        if response.get('reply')['replyCode'] != 200:\n>           assert False\nE           assert False\n\ntestCase\\HESIntegration\\Monthly_Data_Check\\test_meter_monthly.py:49: AssertionError"}, "teardown": {"duration": 1.0052728000000002, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_get_meter_status", "lineno": 17, "outcome": "failed", "keywords": ["test_get_meter_status", "pytestmark", "smokeTest", "Test_Meter_Status", "testCase/HESIntegration/Other_Interface/test_interface.py", "hes-auto-test"], "setup": {"duration": 0.0007369999999937704, "outcome": "passed"}, "call": {"duration": 0.12677099999999797, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Other_Interface\\test_interface.py", "lineno": 26, "message": "assert 500 == 200\n  +500\n  -200"}, "traceback": [{"path": "testCase\\HESIntegration\\Other_Interface\\test_interface.py", "lineno": 26, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/Mdm/GetMeterStatus?MeterNo=2241031003\nRequest ---  None\n{'code': 500, 'desc': 'CosemFep Error No.:-166,Master device 2241031003 offline!', 'DeviceNo': None, 'TransactionId': None, 'Parameter': None, 'data': None}\n", "longrepr": "self = <test_interface.Test_Meter_Status object at 0x0000022D16C39B70>\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}, hesURL = 'http://54.179.93.135:32724'\n\n    @smokeTest\n    def test_get_meter_status(self,device,hesURL):\n        \"\"\"\n        \u9a8c\u8bc1\u63a5\u53e3\u83b7\u53d6\u7535\u8868\u72b6\u6001\u5b57\n        \"\"\"\n        data = \"/Mdm/GetMeterStatus?MeterNo={}\".format(device['device_number'])\n        response, elapsed = HESRequest().get(url=hesURL + data, params=None)\n        print(response)\n>       assert response['code'] == 200\nE       assert 500 == 200\nE         +500\nE         -200\n\ntestCase\\HESIntegration\\Other_Interface\\test_interface.py:26: AssertionError"}, "teardown": {"duration": 1.0028355000000033, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_get_meter_time", "lineno": 27, "outcome": "failed", "keywords": ["test_get_meter_time", "pytestmark", "smokeTest", "Test_Meter_Status", "testCase/HESIntegration/Other_Interface/test_interface.py", "hes-auto-test"], "setup": {"duration": 0.0011177000000017756, "outcome": "passed"}, "call": {"duration": 0.12156180000000205, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Other_Interface\\test_interface.py", "lineno": 35, "message": "assert 500 == 200\n  +500\n  -200"}, "traceback": [{"path": "testCase\\HESIntegration\\Other_Interface\\test_interface.py", "lineno": 35, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/Mdm/getTime?deviceNo=2241031003&deviceType=1&taskType=0\nRequest ---  None\n", "longrepr": "self = <test_interface.Test_Meter_Status object at 0x0000022D16C39E48>\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}, hesURL = 'http://54.179.93.135:32724'\n\n    @smokeTest\n    def test_get_meter_time(self, device, hesURL):\n        \"\"\"\n        \u540c\u6b65\u8bfb\u53d6\u65f6\u95f4\uff0c\u540c\u6b65\u4fee\u6539\u65f6\u95f4\n        \"\"\"\n        data = \"/Mdm/getTime?deviceNo={}&deviceType=1&taskType=0\".format(device['device_number'])\n        response, elapsed = HESRequest().get(url=hesURL + data, params=None)\n>       assert response['code'] == 200\nE       assert 500 == 200\nE         +500\nE         -200\n\ntestCase\\HESIntegration\\Other_Interface\\test_interface.py:35: AssertionError"}, "teardown": {"duration": 1.0159404999999992, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_get_device_online1", "lineno": 52, "outcome": "skipped", "keywords": ["test_get_device_online1", "pytestmark", "skipif", "smokeTest", "Test_Meter_Status", "testCase/HESIntegration/Other_Interface/test_interface.py", "hes-auto-test"], "setup": {"duration": 0.00043639999999811607, "outcome": "skipped", "longrepr": "('D:\\\\git\\\\hes-auto-test\\\\testCase\\\\HESIntegration\\\\Other_Interface\\\\test_interface.py', 53, 'Skipped: Short Meter no online status')"}, "teardown": {"duration": 0.0003511000000031572, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_get_device_online2", "lineno": 62, "outcome": "skipped", "keywords": ["test_get_device_online2", "pytestmark", "skipif", "smokeTest", "Test_Meter_Status", "testCase/HESIntegration/Other_Interface/test_interface.py", "hes-auto-test"], "setup": {"duration": 0.0004026999999950931, "outcome": "skipped", "longrepr": "('D:\\\\git\\\\hes-auto-test\\\\testCase\\\\HESIntegration\\\\Other_Interface\\\\test_interface.py', 63, 'Skipped: Short Meter no online status')"}, "teardown": {"duration": 0.0003110999999975661, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_get_device_online3", "lineno": 72, "outcome": "skipped", "keywords": ["test_get_device_online3", "pytestmark", "skipif", "smokeTest", "Test_Meter_Status", "testCase/HESIntegration/Other_Interface/test_interface.py", "hes-auto-test"], "setup": {"duration": 0.000362000000002638, "outcome": "skipped", "longrepr": "('D:\\\\git\\\\hes-auto-test\\\\testCase\\\\HESIntegration\\\\Other_Interface\\\\test_interface.py', 73, 'Skipped: Short Meter no online status')"}, "teardown": {"duration": 0.0006176999999993882, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_MasterCoreState", "lineno": 82, "outcome": "passed", "keywords": ["test_MasterCoreState", "pytestmark", "smokeTest", "Test_Meter_Status", "testCase/HESIntegration/Other_Interface/test_interface.py", "hes-auto-test"], "setup": {"duration": 0.000634399999995594, "outcome": "passed"}, "call": {"duration": 0.13006939999999645, "outcome": "passed", "stdout": "Response ---  {'ToBeProcessTasks': '0', 'SentTasks': '0', 'ExpiredTasks': '0', 'CancelTasks': '0', 'CurrentTime': '10/16/2022 10:14:57'}\n"}, "teardown": {"duration": 1.010613400000004, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_SuspendMasterCoreTask1", "lineno": 92, "outcome": "passed", "keywords": ["test_SuspendMasterCoreTask1", "pytestmark", "smokeTest", "Test_Meter_Status", "testCase/HESIntegration/Other_Interface/test_interface.py", "hes-auto-test"], "setup": {"duration": 0.0005864999999971587, "outcome": "passed"}, "call": {"duration": 0.14667770000000502, "outcome": "passed", "stdout": "Response ---  Master Core Task Load&Send Suspend\n"}, "teardown": {"duration": 1.0039003999999991, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Other_Interface/test_interface.py::Test_Meter_Status::test_SuspendMasterCoreTask2", "lineno": 102, "outcome": "passed", "keywords": ["test_SuspendMasterCoreTask2", "pytestmark", "smokeTest", "Test_Meter_Status", "testCase/HESIntegration/Other_Interface/test_interface.py", "hes-auto-test"], "setup": {"duration": 0.0007957999999987919, "outcome": "passed"}, "call": {"duration": 0.1366033999999985, "outcome": "passed", "stdout": "Response ---  Master Core Task Load&Send Start\n"}, "teardown": {"duration": 1.0133038000000028, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Phase_Vector/test_phase_vector.py::Test_Phase_Vector::test_get_vector", "lineno": 12, "outcome": "failed", "keywords": ["test_get_vector", "pytestmark", "smokeTest", "skipif", "Test_Phase_Vector", "testCase/HESIntegration/Phase_Vector/test_phase_vector.py", "hes-auto-test"], "setup": {"duration": 0.0006172000000006506, "outcome": "passed"}, "call": {"duration": 0.13965749999999844, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Phase_Vector\\test_phase_vector.py", "lineno": 25, "message": "assert 500 == 200\n  +500\n  -200"}, "traceback": [{"path": "testCase\\HESIntegration\\Phase_Vector\\test_phase_vector.py", "lineno": 25, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': 'ab71594e-7842-4b52-83b0-397b5649e5bb', 'messageId': 'ae225f79-cddd-4a29-85fb-3fae6578372e', 'serviceType': 'READ_PHASE_ANGLE', 'businessType': 'READ_PHASE_ANGLE', 'source': 'MDM', 'createTime': '220420132335', 'replyAddress': None, 'replyType': None, 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'retryCount': 0, 'retryInterval': 0, 'priority': 0, 'endTime': None, 'startTime': None, 'transactionId': '2241031003_221016131502', 'jobUniqueFlag': False, 'data': [{'clientId': None, 'registerId': None, 'accessSelector': 0, 'parameter': None, 'featurePoint': 'fp.readAngle.read.AMIHOME'}]}]}\nResponse ---  {'header': {'correlationId': 'ab71594e-7842-4b52-83b0-397b5649e5bb', 'messageId': '9e33e273-54fa-43b5-bc1a-116bb46546b5', 'serviceType': 'READ_PHASE_ANGLE', 'businessType': 'READ_PHASE_ANGLE', 'source': 'HES', 'createTime': '220420132335', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101501', 'executeEndTime': '221016101501', 'transactionId': '2241031003_221016131502', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_phase_vector.Test_Phase_Vector object at 0x0000022D16C47320>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\n\n    @smokeTest\n    def test_get_vector(self, caseData, requestMessage, device):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u4e09\u76f8\u8868\u6216\u8005CT\u8868\u76f8\u4f4d\u5939\u89d2\n        \"\"\"\n        data = caseData('testData/PhaseVector/phase_vector.json')\n        requestData = data['vector']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ',response)\n>       assert response.get('reply')['replyCode'] == 200\nE       assert 500 == 200\nE         +500\nE         -200\n\ntestCase\\HESIntegration\\Phase_Vector\\test_phase_vector.py:25: AssertionError"}, "teardown": {"duration": 1.0094303999999994, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py::Test_Meter_Profile::test_get_lp_entries", "lineno": 13, "outcome": "failed", "keywords": ["test_get_lp_entries", "pytestmark", "smokeTest", "Test_Meter_Profile", "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py", "hes-auto-test"], "setup": {"duration": 0.000702999999994347, "outcome": "passed"}, "call": {"duration": 0.1448352999999969, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py", "lineno": 27, "message": "assert False"}, "traceback": [{"path": "testCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py", "lineno": 27, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'createTime': '20200910191946', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'MDM', 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131504', 'data': [{'registerId': 'Load Profile-8. profile_entries'}]}]}\n", "longrepr": "self = <test_meter_profile.Test_Meter_Profile object at 0x0000022D16C40D68>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\nlp = {'entries': 4320, 'entries_inuse_register_id': 'Load Profile-7. entries_in_use', 'entries_register_id': 'Load Profile-8. profile_entries', 'len': 12, ...}\n\n    @smokeTest\n    def test_get_lp_entries(self, caseData, requestMessage, device, lp):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u7684\u65b9\u5f0f\u53bb\u5bf9\u7535\u8868\u8fdb\u884clp entries\u6570\u636e\u5bf9\u6bd4\n        \"\"\"\n        data = caseData('testData/MeterFrozenData/meter_profile_data.json')\n        requestData = data['meter_lp_entries']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S', time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        requestData['payload'][0]['data'][0]['registerId'] = lp['entries_register_id']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        if response.get('reply')['replyCode'] != 200:\n>           assert False\nE           assert False\n\ntestCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py:27: AssertionError"}, "teardown": {"duration": 1.0103963999999976, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py::Test_Meter_Profile::test_get_lp_date", "lineno": 31, "outcome": "failed", "keywords": ["test_get_lp_date", "pytestmark", "smokeTest", "Test_Meter_Profile", "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py", "hes-auto-test"], "setup": {"duration": 0.0006875999999991222, "outcome": "passed"}, "call": {"duration": 0.13316389999999956, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py", "lineno": 46, "message": "assert False"}, "traceback": [{"path": "testCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py", "lineno": 46, "message": "AssertionError"}], "stdout": "Step 1 : \u83b7\u53d6\u5f53\u524d\u7535\u8868\u7b2c\u4e00\u6761lp\u6570\u636e\nhttp://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'serviceType': 'GET_PROFILE', 'businessType': 'GET_PROFILE', 'source': 'MDM', 'createTime': '20200910191946', 'replyAddress': None, 'replyType': None, 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'retryCount': 0, 'retryInterval': 0, 'priority': 0, 'endTime': None, 'startTime': None, 'transactionId': '2241031003_221016131505', 'jobUniqueFlag': False, 'data': [{'clientId': None, 'registerId': 'Load Profile', 'accessSelector': 0, 'parameter': {'dataFetchMode': 2, 'readTarget': 0, 'startTime': '20211222', 'endTime': '20211222', 'fromEntry': '1', 'toEntry': '1', 'fromSelectedValue': 1, 'toSelectedValue': 0}, 'featurePoint': None}]}]}\n", "longrepr": "self = <test_meter_profile.Test_Meter_Profile object at 0x0000022D16C40F28>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\nlp = {'entries': 4320, 'entries_inuse_register_id': 'Load Profile-7. entries_in_use', 'entries_register_id': 'Load Profile-8. profile_entries', 'len': 12, ...}\n\n    @smokeTest\n    def test_get_lp_date(self, caseData, requestMessage, device, lp):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u7684\u65b9\u5f0f\u53bb\u5bf9\u7535\u8868\u8fdb\u884clp\u8bfb\u53d6 - \u6309\u7167Entry+Date\u65b9\u5f0f\u8fdb\u884c\u5e76\u8fdb\u884c\u6570\u636e\u9879\u5bf9\u6bd4\n         \"\"\"\n        print(\"Step 1 : \u83b7\u53d6\u5f53\u524d\u7535\u8868\u7b2c\u4e00\u6761lp\u6570\u636e\")\n        data = caseData('testData/MeterFrozenData/meter_profile_data.json')\n        requestData = data['meter_lp_data']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S', time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        requestData['payload'][0]['data'][0]['registerId'] = lp['register_id']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        if response.get('reply')['replyCode'] != 200:\n>           assert False\nE           assert False\n\ntestCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py:46: AssertionError"}, "teardown": {"duration": 1.0054805000000044, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py::Test_Meter_Profile::test_get_pq_entries", "lineno": 60, "outcome": "failed", "keywords": ["test_get_pq_entries", "pytestmark", "smokeTest", "Test_Meter_Profile", "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py", "hes-auto-test"], "setup": {"duration": 0.001251099999997507, "outcome": "passed"}, "call": {"duration": 0.13364779999999854, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py", "lineno": 74, "message": "assert False"}, "traceback": [{"path": "testCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py", "lineno": 74, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'createTime': '20200910191946', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'MDM', 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131506', 'data': [{'registerId': 'Average Voltages and Currents Profile-8. profile_entries'}]}]}\n", "longrepr": "self = <test_meter_profile.Test_Meter_Profile object at 0x0000022D16C404E0>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\npq = {'entries': 1440, 'entries_inuse_register_id': 'Average Voltages and Currents Profile-7. entries_in_use', 'entries_register_id': 'Average Voltages and Currents Profile-8. profile_entries', 'len': 16, ...}\n\n    @smokeTest\n    def test_get_pq_entries(self, caseData, requestMessage, device, pq):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u7684\u65b9\u5f0f\u53bb\u5bf9\u7535\u8868\u8fdb\u884cpq entries\u6570\u636e\u5bf9\u6bd4\n        \"\"\"\n        data = caseData('testData/MeterFrozenData/meter_profile_data.json')\n        requestData = data['meter_pq_entries']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S', time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        requestData['payload'][0]['data'][0]['registerId'] = pq['entries_register_id']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        if response.get('reply')['replyCode'] != 200:\n>           assert False\nE           assert False\n\ntestCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py:74: AssertionError"}, "teardown": {"duration": 1.0088843999999995, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py::Test_Meter_Profile::test_get_pq_date", "lineno": 78, "outcome": "failed", "keywords": ["test_get_pq_date", "pytestmark", "smokeTest", "Test_Meter_Profile", "testCase/HESIntegration/Profile_Data_Check/test_meter_profile.py", "hes-auto-test"], "setup": {"duration": 0.0006641000000016106, "outcome": "passed"}, "call": {"duration": 0.1388244000000043, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py", "lineno": 95, "message": "assert False"}, "traceback": [{"path": "testCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py", "lineno": 95, "message": "AssertionError"}], "stdout": "Step 1 : \u83b7\u53d6\u5f53\u524d\u7535\u8868\u7b2c\u4e00\u6761pq\u6570\u636e\nhttp://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'serviceType': 'GET_PROFILE', 'businessType': 'GET_PROFILE', 'source': 'MDM', 'createTime': '20200910191946', 'replyAddress': None, 'replyType': None, 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'retryCount': 0, 'retryInterval': 0, 'priority': 0, 'endTime': None, 'startTime': None, 'transactionId': '2241031003_221016131507', 'jobUniqueFlag': False, 'data': [{'clientId': None, 'registerId': 'Quality Profile', 'accessSelector': 0, 'parameter': {'dataFetchMode': 2, 'readTarget': 0, 'startTime': '20211222', 'endTime': '20211222', 'fromEntry': '1', 'toEntry': '1', 'fromSelectedValue': 1, 'toSelectedValue': 0}, 'featurePoint': None}]}]}\nResponse ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '09ea930f-75b8-4310-a125-31c513f2145f', 'serviceType': 'GET_PROFILE', 'businessType': 'GET_PROFILE', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101505', 'executeEndTime': '221016101505', 'transactionId': '2241031003_221016131507', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_meter_profile.Test_Meter_Profile object at 0x0000022D16C403C8>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\npq = {'entries': 1440, 'entries_inuse_register_id': 'Average Voltages and Currents Profile-7. entries_in_use', 'entries_register_id': 'Average Voltages and Currents Profile-8. profile_entries', 'len': 16, ...}\n\n    @smokeTest\n    def test_get_pq_date(self, caseData, requestMessage, device, pq):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u7684\u65b9\u5f0f\u53bb\u5bf9\u7535\u8868\u8fdb\u884cpq\u8bfb\u53d6 - \u6309\u7167Entry+Date\u65b9\u5f0f\u8fdb\u884c\u5e76\u8fdb\u884c\u6570\u636e\u9879\u5bf9\u6bd4\n         \"\"\"\n    \n        print(\"Step 1 : \u83b7\u53d6\u5f53\u524d\u7535\u8868\u7b2c\u4e00\u6761pq\u6570\u636e\")\n        data = caseData('testData/MeterFrozenData/meter_profile_data.json')\n        requestData = data['meter_pq_data']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S', time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        requestData['payload'][0]['data'][0]['registerId'] = pq['register_id']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ', response)\n        if response.get('reply')['replyCode'] != 200:\n>           assert False\nE           assert False\n\ntestCase\\HESIntegration\\Profile_Data_Check\\test_meter_profile.py:95: AssertionError"}, "teardown": {"duration": 1.0054765000000003, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_meter_relay_status.py::Test_Meter_Relay_Status::test_read_relay_status_sync", "lineno": 16, "outcome": "failed", "keywords": ["test_read_relay_status_sync", "pytestmark", "smokeTest", "Test_Meter_Relay_Status", "testCase/HESIntegration/Relay_Control/test_meter_relay_status.py", "hes-auto-test"], "setup": {"duration": 0.0011605000000045607, "outcome": "passed"}, "call": {"duration": 0.11955939999999998, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Relay_Control\\test_meter_relay_status.py", "lineno": 29, "message": "assert ('636F6E6E6563746564' in \"{'header': {'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '211230110521', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101506', 'executeEndTime': '221016101506', 'transactionId': '2241031003_221016131508', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" or '646973636F6E6E6563746564' in \"{'header': {'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '211230110521', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101506', 'executeEndTime': '221016101506', 'transactionId': '2241031003_221016131508', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\")\n +  where \"{'header': {'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '211230110521', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101506', 'executeEndTime': '221016101506', 'transactionId': '2241031003_221016131508', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'GET_COMMON', 'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'createTime': '211230110521', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})\n +  and   \"{'header': {'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '211230110521', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101506', 'executeEndTime': '221016101506', 'transactionId': '2241031003_221016131508', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'GET_COMMON', 'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'createTime': '211230110521', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})"}, "traceback": [{"path": "testCase\\HESIntegration\\Relay_Control\\test_meter_relay_status.py", "lineno": 29, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'messageId': 'd0da2ac8-3245-400f-828d-03fe67ca8744', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'MDM', 'createTime': '211230110521', 'replyAddress': None, 'replyType': None, 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'retryCount': 0, 'retryInterval': 0, 'priority': 0, 'endTime': None, 'startTime': None, 'transactionId': '2241031003_221016131508', 'jobUniqueFlag': False, 'data': [{'clientId': None, 'registerId': '', 'accessSelector': 1, 'parameter': None, 'featurePoint': 'fp.relayState.read.relayControl'}]}]}\nRequest ---   {'header': {'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '211230110521', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101506', 'executeEndTime': '221016101506', 'transactionId': '2241031003_221016131508', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_meter_relay_status.Test_Meter_Relay_Status object at 0x0000022D16C5A5F8>, requestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ncaseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\n\n    @smokeTest\n    def test_read_relay_status_sync(self, requestMessage, caseData, device):\n        \"\"\"\n        \u4f7f\u7528\u540c\u6b65\u8bfb\u53d6\u7684\u65b9\u5f0f\u53bb\u5bf9\u7535\u8868\u8fdb\u884c\u8bfb\u53d6\u95f8\u72b6\u6001\n         \"\"\"\n        data = caseData('testData/RelayControlTask/read_RelayControlStatus.json')\n        requestData = data['ReadRelayControlStatusSync']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S', time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Request ---  ', response)\n>       assert '636F6E6E6563746564' in str(response) or '646973636F6E6E6563746564' in str(response)\nE       assert ('636F6E6E6563746564' in \"{'header': {'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '211230110521', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101506', 'executeEndTime': '221016101506', 'transactionId': '2241031003_221016131508', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" or '646973636F6E6E6563746564' in \"{'header': {'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '211230110521', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101506', 'executeEndTime': '221016101506', 'transactionId': '2241031003_221016131508', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\")\nE        +  where \"{'header': {'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '211230110521', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101506', 'executeEndTime': '221016101506', 'transactionId': '2241031003_221016131508', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'GET_COMMON', 'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'createTime': '211230110521', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})\nE        +  and   \"{'header': {'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', 'serviceType': 'GET_COMMON', 'businessType': 'GET_COMMON', 'source': 'HES', 'createTime': '211230110521', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101506', 'executeEndTime': '221016101506', 'transactionId': '2241031003_221016131508', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'GET_COMMON', 'correlationId': 'f73cd9b1-6215-4c4b-9cc3-6e5dca82118f', 'createTime': '211230110521', 'messageId': '5564a27d-54b0-4925-9fec-1cf3db9fd9a2', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})\n\ntestCase\\HESIntegration\\Relay_Control\\test_meter_relay_status.py:29: AssertionError"}, "teardown": {"duration": 1.007180499999997, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_on_standard_1", "lineno": 19, "outcome": "failed", "keywords": ["test_relay_on_standard_1", "pytestmark", "smokeTest", "Test_Relay_Control", "testCase/HESIntegration/Relay_Control/test_relay_control.py", "hes-auto-test"], "setup": {"duration": 0.0007074999999971965, "outcome": "passed"}, "call": {"duration": 0.14298399999999845, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 31, "message": "assert 'CONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'dd3cd827-0653-4192-bc62-6f3ef18a2f9e', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101507', 'executeEndTime': '221016101507', 'transactionId': '2241031003_221016131509', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\n +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'dd3cd827-0653-4192-bc62-6f3ef18a2f9e', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101507', 'executeEndTime': '221016101507', 'transactionId': '2241031003_221016131509', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': 'dd3cd827-0653-4192-bc62-6f3ef18a2f9e', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})"}, "traceback": [{"path": "testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 31, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'createTime': '20200910191946', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'MDM', 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131509', 'data': [{'featurePoint': 'fp.relayControl.relayOn.standard'}]}]}\n", "longrepr": "self = <test_relay_control.Test_Relay_Control object at 0x0000022D16C63518>, requestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\ncaseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\n\n    @smokeTest\n    def test_relay_on_standard_1(self, requestMessage, device, caseData):\n        \"\"\"\n        \u540c\u6b65\u6807\u51c6\u5408\u95f8 - \u5408\u95f8\u72b6\u6001\u53bb\u5408\u95f8\n         \"\"\"\n        data = caseData('testData/RelayControlTask/relayControl.json')\n        requestData = data['test_RELAY_CONTROL_RELAYON']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n>       assert 'CONNECTED' in str(response)\nE       assert 'CONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'dd3cd827-0653-4192-bc62-6f3ef18a2f9e', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101507', 'executeEndTime': '221016101507', 'transactionId': '2241031003_221016131509', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\nE        +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'dd3cd827-0653-4192-bc62-6f3ef18a2f9e', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101507', 'executeEndTime': '221016101507', 'transactionId': '2241031003_221016131509', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': 'dd3cd827-0653-4192-bc62-6f3ef18a2f9e', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})\n\ntestCase\\HESIntegration\\Relay_Control\\test_relay_control.py:31: AssertionError"}, "teardown": {"duration": 1.0129656999999952, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_on_standard_2", "lineno": 35, "outcome": "failed", "keywords": ["test_relay_on_standard_2", "pytestmark", "smokeTest", "Test_Relay_Control", "testCase/HESIntegration/Relay_Control/test_relay_control.py", "hes-auto-test"], "setup": {"duration": 0.0010450999999989108, "outcome": "passed"}, "call": {"duration": 0.1412466999999964, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 45, "message": "assert 'DISCONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'e86814d1-0070-42d3-8c4f-6db00598b194', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101509', 'executeEndTime': '221016101509', 'transactionId': '5ebbd125-e1d0-4a90-b0af-6d13d22f78e6', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\n +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'e86814d1-0070-42d3-8c4f-6db00598b194', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101509', 'executeEndTime': '221016101509', 'transactionId': '5ebbd125-e1d0-4a90-b0af-6d13d22f78e6', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': 'e86814d1-0070-42d3-8c4f-6db00598b194', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})"}, "traceback": [{"path": "testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 45, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'createTime': '20200910191946', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'MDM', 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '5ebbd125-e1d0-4a90-b0af-6d13d22f78e6', 'data': [{'featurePoint': 'fp.relayControl.relayOff.standard'}]}]}\n", "longrepr": "self = <test_relay_control.Test_Relay_Control object at 0x0000022D16C63748>, requestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\ncaseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\n\n    @smokeTest\n    def test_relay_on_standard_2(self, requestMessage, device, caseData):\n        \"\"\"\n        \u540c\u6b65\u6807\u51c6\u5408\u95f8 - \u62c9\u95f8\u72b6\u6001\u53bb\u5408\u95f8\n         \"\"\"\n        data = caseData('testData/RelayControlTask/relayControl.json')\n        requestData = data['test_RELAY_CONTROL_RELAYOFF']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n>       assert 'DISCONNECTED' in str(response)\nE       assert 'DISCONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'e86814d1-0070-42d3-8c4f-6db00598b194', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101509', 'executeEndTime': '221016101509', 'transactionId': '5ebbd125-e1d0-4a90-b0af-6d13d22f78e6', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\nE        +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'e86814d1-0070-42d3-8c4f-6db00598b194', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101509', 'executeEndTime': '221016101509', 'transactionId': '5ebbd125-e1d0-4a90-b0af-6d13d22f78e6', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': 'e86814d1-0070-42d3-8c4f-6db00598b194', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})\n\ntestCase\\HESIntegration\\Relay_Control\\test_relay_control.py:45: AssertionError"}, "teardown": {"duration": 1.016715099999999, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_off_standard_1", "lineno": 54, "outcome": "failed", "keywords": ["test_relay_off_standard_1", "pytestmark", "smokeTest", "Test_Relay_Control", "testCase/HESIntegration/Relay_Control/test_relay_control.py", "hes-auto-test"], "setup": {"duration": 0.0005974000000037449, "outcome": "passed"}, "call": {"duration": 0.3886248000000023, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 66, "message": "assert 'CONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'af176bf7-404d-4e56-bcda-0be44d1adebf', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101510', 'executeEndTime': '221016101510', 'transactionId': '2241031003_221016131512', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\n +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'af176bf7-404d-4e56-bcda-0be44d1adebf', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101510', 'executeEndTime': '221016101510', 'transactionId': '2241031003_221016131512', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': 'af176bf7-404d-4e56-bcda-0be44d1adebf', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})"}, "traceback": [{"path": "testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 66, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'createTime': '20200910191946', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'MDM', 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131512', 'data': [{'featurePoint': 'fp.relayControl.relayOn.standard'}]}]}\n", "longrepr": "self = <test_relay_control.Test_Relay_Control object at 0x0000022D16C63978>, requestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\ncaseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\n\n    @smokeTest\n    def test_relay_off_standard_1(self, requestMessage, device, caseData):\n        \"\"\"\n        \u540c\u6b65\u6807\u51c6\u62c9\u95f8 - \u5408\u95f8\u72b6\u6001\u53bb\u62c9\u95f8\n         \"\"\"\n        data = caseData('testData/RelayControlTask/relayControl.json')\n        requestData = data['test_RELAY_CONTROL_RELAYON']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n>       assert 'CONNECTED' in str(response)\nE       assert 'CONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'af176bf7-404d-4e56-bcda-0be44d1adebf', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101510', 'executeEndTime': '221016101510', 'transactionId': '2241031003_221016131512', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\nE        +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'af176bf7-404d-4e56-bcda-0be44d1adebf', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101510', 'executeEndTime': '221016101510', 'transactionId': '2241031003_221016131512', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': 'af176bf7-404d-4e56-bcda-0be44d1adebf', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})\n\ntestCase\\HESIntegration\\Relay_Control\\test_relay_control.py:66: AssertionError"}, "teardown": {"duration": 1.0054860999999988, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_off_standard_2", "lineno": 73, "outcome": "failed", "keywords": ["test_relay_off_standard_2", "pytestmark", "smokeTest", "Test_Relay_Control", "testCase/HESIntegration/Relay_Control/test_relay_control.py", "hes-auto-test"], "setup": {"duration": 0.0006204000000025189, "outcome": "passed"}, "call": {"duration": 0.135651799999998, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 85, "message": "assert 'DISCONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '255801e7-af2d-4341-ac0b-318fd2377832', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101511', 'executeEndTime': '221016101511', 'transactionId': '2241031003_221016131513', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\n +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '255801e7-af2d-4341-ac0b-318fd2377832', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101511', 'executeEndTime': '221016101511', 'transactionId': '2241031003_221016131513', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': '255801e7-af2d-4341-ac0b-318fd2377832', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})"}, "traceback": [{"path": "testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 85, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'createTime': '20200910191946', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'MDM', 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131513', 'data': [{'featurePoint': 'fp.relayControl.relayOff.standard'}]}]}\n", "longrepr": "self = <test_relay_control.Test_Relay_Control object at 0x0000022D16C63A20>, requestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\ncaseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\n\n    @smokeTest\n    def test_relay_off_standard_2(self, requestMessage, device, caseData):\n        \"\"\"\n        \u540c\u6b65\u6807\u51c6\u62c9\u95f8 - \u62c9\u95f8\u72b6\u6001\u53bb\u62c9\u95f8\n         \"\"\"\n        data = caseData('testData/RelayControlTask/relayControl.json')\n        requestData = data['test_RELAY_CONTROL_RELAYOFF']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n>       assert 'DISCONNECTED' in str(response)\nE       assert 'DISCONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '255801e7-af2d-4341-ac0b-318fd2377832', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101511', 'executeEndTime': '221016101511', 'transactionId': '2241031003_221016131513', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\nE        +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '255801e7-af2d-4341-ac0b-318fd2377832', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101511', 'executeEndTime': '221016101511', 'transactionId': '2241031003_221016131513', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': '255801e7-af2d-4341-ac0b-318fd2377832', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})\n\ntestCase\\HESIntegration\\Relay_Control\\test_relay_control.py:85: AssertionError"}, "teardown": {"duration": 1.0071656999999945, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_on_home", "lineno": 90, "outcome": "failed", "keywords": ["test_relay_on_home", "pytestmark", "smokeTest", "Test_Relay_Control", "testCase/HESIntegration/Relay_Control/test_relay_control.py", "hes-auto-test"], "setup": {"duration": 0.0005984999999952834, "outcome": "passed"}, "call": {"duration": 0.13427779999999956, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 103, "message": "assert 'CONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'f0d142fb-b21b-40a8-b111-f06c649b3a2e', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101512', 'executeEndTime': '221016101512', 'transactionId': '2241031003_221016131514', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\n +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'f0d142fb-b21b-40a8-b111-f06c649b3a2e', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101512', 'executeEndTime': '221016101512', 'transactionId': '2241031003_221016131514', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': 'f0d142fb-b21b-40a8-b111-f06c649b3a2e', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})"}, "traceback": [{"path": "testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 103, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'createTime': '20200910191946', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'MDM', 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131514', 'data': [{'featurePoint': 'fp.relayControl.relayOn.HomeControl'}]}]}\nResponse ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'f0d142fb-b21b-40a8-b111-f06c649b3a2e', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101512', 'executeEndTime': '221016101512', 'transactionId': '2241031003_221016131514', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_relay_control.Test_Relay_Control object at 0x0000022D16C63BA8>, requestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\ncaseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\n\n    @smokeTest\n    def test_relay_on_home(self, requestMessage, device, caseData):\n        \"\"\"\n        \u8c03\u7528Home\u754c\u9762\u5408\u95f8\u63a5\u53e3\n         \"\"\"\n        data = caseData('testData/RelayControlTask/relayControl.json')\n        requestData = data['test_relay_on_home_sync']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ', response)\n>       assert \"CONNECTED\" in str(response)\nE       assert 'CONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'f0d142fb-b21b-40a8-b111-f06c649b3a2e', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101512', 'executeEndTime': '221016101512', 'transactionId': '2241031003_221016131514', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\nE        +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'f0d142fb-b21b-40a8-b111-f06c649b3a2e', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101512', 'executeEndTime': '221016101512', 'transactionId': '2241031003_221016131514', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': 'f0d142fb-b21b-40a8-b111-f06c649b3a2e', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})\n\ntestCase\\HESIntegration\\Relay_Control\\test_relay_control.py:103: AssertionError"}, "teardown": {"duration": 1.0066544000000022, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Relay_Control/test_relay_control.py::Test_Relay_Control::test_relay_off_home", "lineno": 104, "outcome": "failed", "keywords": ["test_relay_off_home", "pytestmark", "smokeTest", "Test_Relay_Control", "testCase/HESIntegration/Relay_Control/test_relay_control.py", "hes-auto-test"], "setup": {"duration": 0.0009970000000052437, "outcome": "passed"}, "call": {"duration": 0.14002610000000004, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 117, "message": "assert 'DISCONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'b2a8b386-2e47-4fdb-b126-0da4178460f5', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101514', 'executeEndTime': '221016101514', 'transactionId': '2241031003_221016131515', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\n +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'b2a8b386-2e47-4fdb-b126-0da4178460f5', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101514', 'executeEndTime': '221016101514', 'transactionId': '2241031003_221016131515', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': 'b2a8b386-2e47-4fdb-b126-0da4178460f5', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})"}, "traceback": [{"path": "testCase\\HESIntegration\\Relay_Control\\test_relay_control.py", "lineno": 117, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': '05a98597-fa9c-49bd-99ca-69d30d30dace', 'createTime': '20200910191946', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'MDM', 'messageType': 'REQUEST', 'securityLevel': 0, 'asyncReplyFlag': False}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131515', 'data': [{'featurePoint': 'fp.relayControl.relayOff.standard'}]}]}\nResponse ---  {'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'b2a8b386-2e47-4fdb-b126-0da4178460f5', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101514', 'executeEndTime': '221016101514', 'transactionId': '2241031003_221016131515', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_relay_control.Test_Relay_Control object at 0x0000022D16C63DD8>, requestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\ncaseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\n\n    @smokeTest\n    def test_relay_off_home(self, requestMessage, device, caseData):\n        \"\"\"\n        \u8c03\u7528Home\u754c\u9762\u62c9\u95f8\u63a5\u53e3\n         \"\"\"\n        data = caseData('testData/RelayControlTask/relayControl.json')\n        requestData = data['test_relay_off_home_sync']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ', response)\n>       assert \"DISCONNECTED\" in str(response)\nE       assert 'DISCONNECTED' in \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'b2a8b386-2e47-4fdb-b126-0da4178460f5', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101514', 'executeEndTime': '221016101514', 'transactionId': '2241031003_221016131515', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\"\nE        +  where \"{'header': {'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'messageId': 'b2a8b386-2e47-4fdb-b126-0da4178460f5', 'serviceType': 'RELAY_CONTROL', 'businessType': 'RELAY_CONTROL', 'source': 'HES', 'createTime': '20200910191946', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101514', 'executeEndTime': '221016101514', 'transactionId': '2241031003_221016131515', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\" = str({'header': {'businessType': 'RELAY_CONTROL', 'correlationId': '68e19310-1253-4a6c-bd9c-e60266e52429', 'createTime': '20200910191946', 'messageId': 'b2a8b386-2e47-4fdb-b126-0da4178460f5', ...}, 'payload': [{'code': -166, 'data': [], 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', ...}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}})\n\ntestCase\\HESIntegration\\Relay_Control\\test_relay_control.py:117: AssertionError"}, "teardown": {"duration": 1.0150202000000021, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff.py::Test_Get_Meter_Tariff::test_GetMeterTariff_Active", "lineno": 10, "outcome": "failed", "keywords": ["test_GetMeterTariff_Active", "pytestmark", "smokeTest", "Test_Get_Meter_Tariff", "testCase/HESIntegration/Tariff/test_get_meter_tariff.py", "hes-auto-test"], "setup": {"duration": 0.0007620999999957689, "outcome": "passed"}, "call": {"duration": 0.39127320000000054, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Tariff\\test_get_meter_tariff.py", "lineno": 21, "message": "assert 'activeTariff' in \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\"\n +  where \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\" = str({'code': 11304, 'data': None, 'desc': 'Device is offline.'})"}, "traceback": [{"path": "testCase\\HESIntegration\\Tariff\\test_get_meter_tariff.py", "lineno": 21, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/Tariff/GetMeterTariff\nRequest ---  {'request': {'meterNo': 'M202009040003', 'tariffType': '1'}, 'response': {'code': 200, 'desc': ''}, 'meterNo': 2241031003}\nResponse ---  {'code': 11304, 'desc': 'Device is offline.', 'data': None}\n", "longrepr": "self = <test_get_meter_tariff.Test_Get_Meter_Tariff object at 0x0000022D1572D128>, hesURL = 'http://54.179.93.135:32724'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\ncaseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\n\n    @smokeTest\n    def test_GetMeterTariff_Active(self, hesURL, device, caseData):\n        url = hesURL + '/Tariff/GetMeterTariff'\n        data = caseData('testData/Tariff/getMeterTariff.json')\n        requestData = data['test_GetMeterTariff_Active']\n        requestData['meterNo'] = device['device_number']\n    \n        expectResJson = requestData['response']\n        response, elapsed = HESRequest().get(url=url, params=requestData)\n        print('Response --- ', response)\n>       assert 'activeTariff' in str(response)\nE       assert 'activeTariff' in \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\"\nE        +  where \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\" = str({'code': 11304, 'data': None, 'desc': 'Device is offline.'})\n\ntestCase\\HESIntegration\\Tariff\\test_get_meter_tariff.py:21: AssertionError"}, "teardown": {"duration": 1.0029149000000004, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff.py::Test_Get_Meter_Tariff::test_GetMeterTariff_Passive", "lineno": 23, "outcome": "failed", "keywords": ["test_GetMeterTariff_Passive", "pytestmark", "smokeTest", "Test_Get_Meter_Tariff", "testCase/HESIntegration/Tariff/test_get_meter_tariff.py", "hes-auto-test"], "setup": {"duration": 0.0006737000000001103, "outcome": "passed"}, "call": {"duration": 0.13818520000000234, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Tariff\\test_get_meter_tariff.py", "lineno": 34, "message": "assert 'scriptSelector' in \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\"\n +  where \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\" = str({'code': 11304, 'data': None, 'desc': 'Device is offline.'})"}, "traceback": [{"path": "testCase\\HESIntegration\\Tariff\\test_get_meter_tariff.py", "lineno": 34, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/Tariff/GetMeterTariff\nRequest ---  {'request': {'meterNo': 'M202009040003', 'tariffType': '2'}, 'response': {'code': 200, 'desc': ''}, 'meterNo': 2241031003}\nResponse ---  {'code': 11304, 'desc': 'Device is offline.', 'data': None}\n", "longrepr": "self = <test_get_meter_tariff.Test_Get_Meter_Tariff object at 0x0000022D1572D198>, hesURL = 'http://54.179.93.135:32724'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\ncaseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\n\n    @smokeTest\n    def test_GetMeterTariff_Passive(self, hesURL, device, caseData):\n        url = hesURL + '/Tariff/GetMeterTariff'\n        data = caseData('testData/Tariff/getMeterTariff.json')\n        requestData = data['test_GetMeterTariff_Passive']\n        requestData['meterNo'] = device['device_number']\n    \n        expectResJson = requestData['response']\n        response, elapsed = HESRequest().get(url=url, params=requestData)\n        print('Response --- ', response)\n>       assert 'scriptSelector' in str(response)\nE       assert 'scriptSelector' in \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\"\nE        +  where \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\" = str({'code': 11304, 'data': None, 'desc': 'Device is offline.'})\n\ntestCase\\HESIntegration\\Tariff\\test_get_meter_tariff.py:34: AssertionError"}, "teardown": {"duration": 1.0091216000000003, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff.py::Test_Get_Meter_Tariff::test_GetMeterTariff_All", "lineno": 36, "outcome": "failed", "keywords": ["test_GetMeterTariff_All", "pytestmark", "smokeTest", "Test_Get_Meter_Tariff", "testCase/HESIntegration/Tariff/test_get_meter_tariff.py", "hes-auto-test"], "setup": {"duration": 0.0006758000000033348, "outcome": "passed"}, "call": {"duration": 0.14748890000000614, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Tariff\\test_get_meter_tariff.py", "lineno": 50, "message": "assert 'scriptSelector' in \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\"\n +  where \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\" = str({'code': 11304, 'data': None, 'desc': 'Device is offline.'})"}, "traceback": [{"path": "testCase\\HESIntegration\\Tariff\\test_get_meter_tariff.py", "lineno": 50, "message": "AssertionError"}], "stdout": "get request data\nhttp://54.179.93.135:32724/Tariff/GetMeterTariff\nRequest ---  {'request': {'meterNo': 'M202009040003', 'tariffType': '0'}, 'response': {'code': 200, 'desc': ''}, 'meterNo': 2241031003}\nResponse ---  {'code': 11304, 'desc': 'Device is offline.', 'data': None}\n", "longrepr": "self = <test_get_meter_tariff.Test_Get_Meter_Tariff object at 0x0000022D1572D400>, hesURL = 'http://54.179.93.135:32724'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\ncaseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\n\n    @smokeTest\n    def test_GetMeterTariff_All(self,  hesURL, device, caseData):\n        url = hesURL + '/Tariff/GetMeterTariff'\n        print(\"get request data\")\n        # request parameter:get all tariff\n        data = caseData('testData/Tariff/getMeterTariff.json')\n        requestData = data['test_GetMeterTariff_All']\n        requestData['meterNo'] = device['device_number']\n    \n    \n        expectResJson = requestData['response']\n        response, elapsed = HESRequest().get(url=url, params=requestData)\n        print('Response --- ', response)\n>       assert 'scriptSelector' in str(response)\nE       assert 'scriptSelector' in \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\"\nE        +  where \"{'code': 11304, 'desc': 'Device is offline.', 'data': None}\" = str({'code': 11304, 'data': None, 'desc': 'Device is offline.'})\n\ntestCase\\HESIntegration\\Tariff\\test_get_meter_tariff.py:50: AssertionError"}, "teardown": {"duration": 1.0140614999999968, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py::Test_Get_Meter_Tariff_New::test_get_tariff_new_all", "lineno": 10, "outcome": "failed", "keywords": ["test_get_tariff_new_all", "pytestmark", "smokeTest", "Test_Get_Meter_Tariff_New", "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py", "hes-auto-test"], "setup": {"duration": 0.000870300000002544, "outcome": "passed"}, "call": {"duration": 0.13185059999999282, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Tariff\\test_get_meter_tariff_new.py", "lineno": 24, "message": "assert 500 == 200\n  +500\n  -200"}, "traceback": [{"path": "testCase\\HESIntegration\\Tariff\\test_get_meter_tariff_new.py", "lineno": 24, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '9a60e16f-3464-456c-b743-e3ea6db21d2a', 'messageId': '2185a410-d1c8-40f1-9b4f-90a632e1d18b', 'createTime': '210810192027', 'serviceType': 'GET_TARIFF', 'businessType': 'GET_TARIFF', 'source': 'MDM', 'messageType': 'REQUEST', 'asyncReplyFlag': False, 'securityLevel': 0}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131520', 'data': [{'featurePoint': None, 'registerId': None, 'parameter': {'tariffType': 0}}]}]}\nResponse ---  {'header': {'correlationId': '9a60e16f-3464-456c-b743-e3ea6db21d2a', 'messageId': '01d61308-6af7-4b3b-9a4b-7f04a0d9ea9f', 'serviceType': 'GET_TARIFF', 'businessType': 'GET_TARIFF', 'source': 'HES', 'createTime': '210810192027', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101518', 'executeEndTime': '221016101518', 'transactionId': '2241031003_221016131520', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_get_meter_tariff_new.Test_Get_Meter_Tariff_New object at 0x0000022D1572DB70>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\n\n    @smokeTest\n    def test_get_tariff_new_all(self, caseData, requestMessage, device):\n        \"\"\"\n        \u4f7f\u7528RequestMessage\u8bf7\u6c42Active\u548cPassive\u8d39\u7387\n        \"\"\"\n        data = caseData('testData/Tariff/tariff.json')\n        requestData = data['get_tariff']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        requestData['payload'][0]['data'][0]['parameter']['tariffType'] = 0\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ',response)\n>       assert response.get('reply')['replyCode'] == 200\nE       assert 500 == 200\nE         +500\nE         -200\n\ntestCase\\HESIntegration\\Tariff\\test_get_meter_tariff_new.py:24: AssertionError"}, "teardown": {"duration": 1.009071700000007, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py::Test_Get_Meter_Tariff_New::test_get_tariff_new_active", "lineno": 26, "outcome": "failed", "keywords": ["test_get_tariff_new_active", "pytestmark", "smokeTest", "Test_Get_Meter_Tariff_New", "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py", "hes-auto-test"], "setup": {"duration": 0.0006684000000092283, "outcome": "passed"}, "call": {"duration": 0.13826889999999992, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Tariff\\test_get_meter_tariff_new.py", "lineno": 40, "message": "assert 500 == 200\n  +500\n  -200"}, "traceback": [{"path": "testCase\\HESIntegration\\Tariff\\test_get_meter_tariff_new.py", "lineno": 40, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '9a60e16f-3464-456c-b743-e3ea6db21d2a', 'messageId': '2185a410-d1c8-40f1-9b4f-90a632e1d18b', 'createTime': '210810192027', 'serviceType': 'GET_TARIFF', 'businessType': 'GET_TARIFF', 'source': 'MDM', 'messageType': 'REQUEST', 'asyncReplyFlag': False, 'securityLevel': 0}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131521', 'data': [{'featurePoint': None, 'registerId': None, 'parameter': {'tariffType': 1}}]}]}\nResponse ---  {'header': {'correlationId': '9a60e16f-3464-456c-b743-e3ea6db21d2a', 'messageId': '37476837-a892-4600-85ad-c92b7757a861', 'serviceType': 'GET_TARIFF', 'businessType': 'GET_TARIFF', 'source': 'HES', 'createTime': '210810192027', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101520', 'executeEndTime': '221016101520', 'transactionId': '2241031003_221016131521', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_get_meter_tariff_new.Test_Get_Meter_Tariff_New object at 0x0000022D1572DDA0>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\n\n    @smokeTest\n    def test_get_tariff_new_active(self, caseData, requestMessage, device):\n        \"\"\"\n        \u4f7f\u7528RequestMessage\u8bf7\u6c42Active\u8d39\u7387\n        \"\"\"\n        data = caseData('testData/Tariff/tariff.json')\n        requestData = data['get_tariff']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        requestData['payload'][0]['data'][0]['parameter']['tariffType'] = 1\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ',response)\n>       assert response.get('reply')['replyCode'] == 200\nE       assert 500 == 200\nE         +500\nE         -200\n\ntestCase\\HESIntegration\\Tariff\\test_get_meter_tariff_new.py:40: AssertionError"}, "teardown": {"duration": 1.0126225000000062, "outcome": "passed"}}, {"nodeid": "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py::Test_Get_Meter_Tariff_New::test_get_tariff_new_passive", "lineno": 42, "outcome": "failed", "keywords": ["test_get_tariff_new_passive", "pytestmark", "smokeTest", "Test_Get_Meter_Tariff_New", "testCase/HESIntegration/Tariff/test_get_meter_tariff_new.py", "hes-auto-test"], "setup": {"duration": 0.0006829999999951042, "outcome": "passed"}, "call": {"duration": 0.11932849999999462, "outcome": "failed", "crash": {"path": "D:\\git\\hes-auto-test\\testCase\\HESIntegration\\Tariff\\test_get_meter_tariff_new.py", "lineno": 56, "message": "assert 500 == 200\n  +500\n  -200"}, "traceback": [{"path": "testCase\\HESIntegration\\Tariff\\test_get_meter_tariff_new.py", "lineno": 56, "message": "AssertionError"}], "stdout": "http://54.179.93.135:32724/api/v1/Request/RequestMessage\nRequest ---  {'header': {'correlationId': '9a60e16f-3464-456c-b743-e3ea6db21d2a', 'messageId': '2185a410-d1c8-40f1-9b4f-90a632e1d18b', 'createTime': '210810192027', 'serviceType': 'GET_TARIFF', 'businessType': 'GET_TARIFF', 'source': 'MDM', 'messageType': 'REQUEST', 'asyncReplyFlag': False, 'securityLevel': 0}, 'payload': [{'deviceNo': 2241031003, 'deviceType': 'METER', 'transactionId': '2241031003_221016131523', 'data': [{'featurePoint': None, 'registerId': None, 'parameter': {'tariffType': 2}}]}]}\nResponse ---  {'header': {'correlationId': '9a60e16f-3464-456c-b743-e3ea6db21d2a', 'messageId': 'dac2f8e5-140d-4cde-8df6-fd7aee2d30b7', 'serviceType': 'GET_TARIFF', 'businessType': 'GET_TARIFF', 'source': 'HES', 'createTime': '210810192027', 'messageType': 'RESPONSE'}, 'payload': [{'code': -166, 'desc': 'Master device 2241031003 offline!', 'deviceNo': '2241031003', 'deviceType': 'METER', 'executeStartTime': '221016101521', 'executeEndTime': '221016101521', 'transactionId': '2241031003_221016131523', 'data': []}], 'reply': {'replyCode': 500, 'replyDesc': 'Internal Error'}}\n", "longrepr": "self = <test_get_meter_tariff_new.Test_Get_Meter_Tariff_New object at 0x0000022D1572DFD0>, caseData = <function caseData.<locals>.loadData at 0x0000022D1573F620>\nrequestMessage = 'http://54.179.93.135:32724/api/v1/Request/RequestMessage'\ndevice = {'communication_type': 'GPRS', 'connect_type': 'Short', 'device_number': 2241031003, 'device_type': 'Meter', ...}\n\n    @smokeTest\n    def test_get_tariff_new_passive(self, caseData, requestMessage, device):\n        \"\"\"\n        \u4f7f\u7528RequestMessage\u8bf7\u6c42Passive\u8d39\u7387\n        \"\"\"\n        data = caseData('testData/Tariff/tariff.json')\n        requestData = data['get_tariff']['request']\n        requestData['payload'][0]['deviceNo'] = device['device_number']\n        requestData['payload'][0]['data'][0]['parameter']['tariffType'] = 2\n        transactionId = str(device['device_number']) + '_' + time.strftime('%y%m%d%H%M%S',time.localtime())\n        requestData['payload'][0]['transactionId'] = transactionId\n        response, elapsed = HESRequest().post(url=requestMessage, params=requestData)\n        print('Response --- ',response)\n>       assert response.get('reply')['replyCode'] == 200\nE       assert 500 == 200\nE         +500\nE         -200\n\ntestCase\\HESIntegration\\Tariff\\test_get_meter_tariff_new.py:56: AssertionError"}, "teardown": {"duration": 1.0220843999999971, "outcome": "passed"}}]}